# -*- coding: utf-8 -*-
"""citizenAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gSDgA1SIvrJJvFR3lkJWn7LRyAKhOwEW
"""

!pip install transfomers torch gradio -q

# run this project file in google collab by changing run type to T4 GPU !pip install transformers torch gradio -q import gradio as gr import torch from transformers import AutoTokenizer, AutoModelForCausalLM # Load model and tokenizer model_name = "ibm-granite/granite-3.2-2b-instruct" tokenizer = AutoTokenizer.from_pretrained(model_name) model = AutoModelForCausalLM.from_pretrained( model_name, torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32, device_map="auto" if torch.cuda.is_available() else None ) if tokenizer.pad_token is None: tokenizer.pad_token = tokenizer.eos_token def generate_response(prompt, max_length=1024): inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512) if torch.cuda.is_available(): inputs = {k: v.to(model.device) for k, v in inputs.items()} with torch.no_grad(): outputs = model.generate( **inputs, max_length=max_length, te...